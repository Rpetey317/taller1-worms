#include <iterator>

#include "Game.h"

GameUpdate* GameHandler::process_disconnect(ClientDisconnectedUpdate& event) {
    int disconnected_id = event.get_id();
    if (this->curr_pl->first == disconnected_id) {
        auto nx_pl = std::next(this->curr_pl);
        if (nx_pl == this->players.end()) {
            nx_pl = this->players.begin();
        }
        // since player is no longer in the game, "server" sends this update
        this->eventq.push(new ClientPTurnAdvanceUpdate(SERVER_ID, nx_pl));
    }
    this->players.erase(disconnected_id);
    plcount--;

    std::cout << "A player disconnected. Now online: " << plcount << " players." << std::endl;
    return new GamePlayerDisconnectedUpdate(disconnected_id);
}

GameUpdate* GameHandler::process_new_connect(ClientConnectedUpdate& event) {
    plcount++;
    std::cout << "New player connected. Now online: " << plcount << " players." << std::endl;

    // makes new player the current player if lobby is empty
    if (this->curr_pl == this->players.end()) {
        this->curr_pl = this->players.find(event.get_id());

        // event is generated by "server" since lobby is empty
        this->eventq.push(new ClientPTurnAdvanceUpdate(SERVER_ID, this->curr_pl));
    }

    std::cout << "New connection " << std::endl;
    return new GamePlayerConnectedUpdate(event.get_id());
}

GameUpdate* GameHandler::process_message(ClientMessageUpdate& event) {

    std::cout << "Message " << std::endl;
    return new GameChatMessageUpdate(event.get_id(), event.get_msg());
}

GameUpdate* GameHandler::process_NullUpdate(ClientNullUpdate& event) {

    std::cout << "Null update" << std::endl;
    return new GameNullUpdate();
}

GameUpdate* GameHandler::process_TurnAdvance(ClientPTurnAdvanceUpdate& event) {
    std::cout << "Starting turn advance" << std::endl;
    auto new_curr_pl = event.get_new_pl();

    if (new_curr_pl == this->players.end()) {
        return new GameNullUpdate();
    }
    this->curr_pl = new_curr_pl;
    std::cout << "Turn advance " << std::endl;
    return new GameTurnChangeUpdate(new_curr_pl->first);
}

GameUpdate* GameHandler::process_box2d(ClientBox2DUpdate& event) {
    std::cout << "Intento procesar box2d event" << std::endl;
    return box2d.process(event);
}
